{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7b583f8-6e7d-492d-8fae-059607202b61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Accuracy: 99.40%\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98       324\n",
      "           1       1.00      1.00      1.00      1676\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Load updated dataset\n",
    "df = pd.read_csv(\"bank_investment_dataset_updated.csv\")\n",
    "\n",
    "# Prepare features and target (predicting success or failure of investment)\n",
    "X = df.drop(columns=[\"Successful_Investment\", \"Failed_Investment\", \"Company_Name\"])\n",
    "y = df[\"Successful_Investment\"]  # Predicting success (1) or failure (0)\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize Random Forest model with optimized parameters\n",
    "rf_model = RandomForestClassifier(n_estimators=300, max_depth=15, min_samples_split=5, \n",
    "                                  min_samples_leaf=2, bootstrap=True, random_state=42)\n",
    "\n",
    "# Train model\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = rf_model.predict(X_test_scaled)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"\\nModel Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d8fb387-8a26-4e92-8934-6390c1ff8850",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Accuracy: 99.40%\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98       324\n",
      "           1       1.00      1.00      1.00      1676\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n",
      "\n",
      "Enter your investment details:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Bank_Balance:  500000\n",
      "Enter Investment_Amount:  25000\n",
      "Enter Expenses:  4500\n",
      "Enter Transactions:  20000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Based on your input, the best company to invest in is: Maruti\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Load updated dataset\n",
    "df = pd.read_csv(\"bank_investment_dataset_updated.csv\")\n",
    "\n",
    "# Encode Company Name\n",
    "label_encoder = LabelEncoder()\n",
    "df[\"Company_Name_Encoded\"] = label_encoder.fit_transform(df[\"Company_Name\"])\n",
    "\n",
    "# Prepare features and target (predicting success or failure of investment)\n",
    "X = df.drop(columns=[\"Successful_Investment\", \"Failed_Investment\", \"Company_Name\", \"Company_Name_Encoded\"])\n",
    "y = df[\"Successful_Investment\"]  # Predicting success (1) or failure (0)\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize Random Forest model with optimized parameters\n",
    "rf_model = RandomForestClassifier(n_estimators=300, max_depth=15, min_samples_split=5, \n",
    "                                  min_samples_leaf=2, bootstrap=True, random_state=42)\n",
    "\n",
    "# Train model\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = rf_model.predict(X_test_scaled)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"\\nModel Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# User input for investment decision\n",
    "print(\"\\nEnter your investment details:\")\n",
    "user_input = {}\n",
    "for feature in X.columns:\n",
    "    value = float(input(f\"Enter {feature}: \"))\n",
    "    user_input[feature] = value\n",
    "\n",
    "# Convert user input into a dataframe\n",
    "user_df = pd.DataFrame([user_input])\n",
    "user_df_scaled = scaler.transform(user_df)\n",
    "\n",
    "# Predict whether the investment will be successful\n",
    "investment_success = rf_model.predict(user_df_scaled)[0]\n",
    "\n",
    "if investment_success == 1:\n",
    "    # Find the best company based on user input\n",
    "    similar_investments = df[df[\"Successful_Investment\"] == 1].copy()\n",
    "    \n",
    "    # Compute Euclidean distance between user input and past successful investments\n",
    "    distances = np.linalg.norm(similar_investments[X.columns] - user_df.values, axis=1)\n",
    "    \n",
    "    # Get index of closest match\n",
    "    closest_company_index = np.argmin(distances)\n",
    "    \n",
    "    # Get the company name\n",
    "    best_company = similar_investments.iloc[closest_company_index][\"Company_Name\"]\n",
    "    \n",
    "    print(f\"\\nBased on your input, the best company to invest in is: {best_company}\")\n",
    "else:\n",
    "    print(\"\\nBased on your input, investment might not be successful. Consider adjusting parameters.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "095933be-6c14-4c83-abe7-43c18167f17c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Accuracy: 99.40%\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98       324\n",
      "           1       1.00      1.00      1.00      1676\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n",
      "\n",
      "Enter your investment details:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Bank_Balance:  550000\n",
      "Enter Investment_Amount:  8965\n",
      "Enter Expenses:  5600\n",
      "Enter Transactions:  10000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Based on your input, the top 10 companies to invest in are:\n",
      "1. ICICI\n",
      "2. HUL\n",
      "3. Maruti\n",
      "4. Wipro\n",
      "5. Maruti\n",
      "6. HUL\n",
      "7. Wipro\n",
      "8. Wipro\n",
      "9. SBI\n",
      "10. Maruti\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Load updated dataset\n",
    "df = pd.read_csv(\"bank_investment_dataset_updated.csv\")\n",
    "\n",
    "# Encode Company Name\n",
    "label_encoder = LabelEncoder()\n",
    "df[\"Company_Name_Encoded\"] = label_encoder.fit_transform(df[\"Company_Name\"])\n",
    "\n",
    "# Prepare features and target (predicting success or failure of investment)\n",
    "X = df.drop(columns=[\"Successful_Investment\", \"Failed_Investment\", \"Company_Name\", \"Company_Name_Encoded\"])\n",
    "y = df[\"Successful_Investment\"]  # Predicting success (1) or failure (0)\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize Random Forest model with optimized parameters\n",
    "rf_model = RandomForestClassifier(n_estimators=300, max_depth=15, min_samples_split=5, \n",
    "                                  min_samples_leaf=2, bootstrap=True, random_state=42)\n",
    "\n",
    "# Train model\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = rf_model.predict(X_test_scaled)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"\\nModel Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# User input for investment decision\n",
    "print(\"\\nEnter your investment details:\")\n",
    "user_input = {}\n",
    "for feature in X.columns:\n",
    "    value = float(input(f\"Enter {feature}: \"))\n",
    "    user_input[feature] = value\n",
    "\n",
    "# Convert user input into a dataframe\n",
    "user_df = pd.DataFrame([user_input])\n",
    "user_df_scaled = scaler.transform(user_df)\n",
    "\n",
    "# Predict whether the investment will be successful\n",
    "investment_success = rf_model.predict(user_df_scaled)[0]\n",
    "\n",
    "if investment_success == 1:\n",
    "    # Find the best companies based on user input\n",
    "    successful_investments = df[df[\"Successful_Investment\"] == 1].copy()\n",
    "    \n",
    "    # Compute Euclidean distance between user input and past successful investments\n",
    "    distances = np.linalg.norm(successful_investments[X.columns] - user_df.values, axis=1)\n",
    "    \n",
    "    # Get indices of top 10 closest matches\n",
    "    top_10_indices = np.argsort(distances)[:10]\n",
    "    \n",
    "    # Get the top 10 company names\n",
    "    top_10_companies = successful_investments.iloc[top_10_indices][\"Company_Name\"].tolist()\n",
    "    \n",
    "    print(\"\\nBased on your input, the top 10 companies to invest in are:\")\n",
    "    for i, company in enumerate(top_10_companies, start=1):\n",
    "        print(f\"{i}. {company}\")\n",
    "else:\n",
    "    print(\"\\nBased on your input, investment might not be successful. Consider adjusting parameters.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0f18bb2a-258a-4074-9e5f-0054cab687c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Accuracy: 99.40%\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98       324\n",
      "           1       1.00      1.00      1.00      1676\n",
      "\n",
      "    accuracy                           0.99      2000\n",
      "   macro avg       0.99      0.99      0.99      2000\n",
      "weighted avg       0.99      0.99      0.99      2000\n",
      "\n",
      "\n",
      "Enter your investment details:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Bank_Balance:  8500000\n",
      "Enter Investment_Amount:  10000\n",
      "Enter Expenses:  8956\n",
      "Enter Transactions:  200000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Based on your input, the top 10 companies to invest in are:\n",
      "1. Reliance\n",
      "2. HUL\n",
      "3. Maruti\n",
      "4. ICICI\n",
      "5. HDFC\n",
      "6. Reliance\n",
      "7. Wipro\n",
      "8. HUL\n",
      "9. ICICI\n",
      "10. Reliance\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# Load updated dataset\n",
    "df = pd.read_csv(\"bank_investment_dataset_updated.csv\")\n",
    "\n",
    "# Encode Company Name\n",
    "label_encoder = LabelEncoder()\n",
    "df[\"Company_Name_Encoded\"] = label_encoder.fit_transform(df[\"Company_Name\"])\n",
    "\n",
    "# Prepare features and target (predicting success or failure of investment)\n",
    "X = df.drop(columns=[\"Successful_Investment\", \"Failed_Investment\", \"Company_Name\", \"Company_Name_Encoded\"])\n",
    "y = df[\"Successful_Investment\"]  # Predicting success (1) or failure (0)\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Initialize Random Forest model with optimized parameters\n",
    "rf_model = RandomForestClassifier(n_estimators=300, max_depth=15, min_samples_split=5, \n",
    "                                  min_samples_leaf=2, bootstrap=True, random_state=42)\n",
    "\n",
    "# Train model\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = rf_model.predict(X_test_scaled)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"\\nModel Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# User input for investment decision\n",
    "print(\"\\nEnter your investment details:\")\n",
    "user_input = {}\n",
    "for feature in X.columns:\n",
    "    value = float(input(f\"Enter {feature}: \"))\n",
    "    user_input[feature] = value\n",
    "\n",
    "# Convert user input into a dataframe\n",
    "user_df = pd.DataFrame([user_input])\n",
    "user_df_scaled = scaler.transform(user_df)\n",
    "\n",
    "# Predict whether the investment will be successful\n",
    "investment_success = rf_model.predict(user_df_scaled)[0]\n",
    "\n",
    "if investment_success == 1:\n",
    "    # Find the best companies based on user input\n",
    "    successful_investments = df[df[\"Successful_Investment\"] == 1].copy()\n",
    "    \n",
    "    # Compute Euclidean distance between user input and past successful investments\n",
    "    distances = np.linalg.norm(successful_investments[X.columns] - user_df.values, axis=1)\n",
    "    \n",
    "    # Get indices of top 10 closest matches\n",
    "    top_10_indices = np.argsort(distances)[:10]\n",
    "    \n",
    "    # Get the top 10 company names\n",
    "    top_10_companies = successful_investments.iloc[top_10_indices][\"Company_Name\"].tolist()\n",
    "    \n",
    "    print(\"\\nBased on your input, the top 10 companies to invest in are:\")\n",
    "    for i, company in enumerate(top_10_companies, start=1):\n",
    "        print(f\"{i}. {company}\")\n",
    "else:\n",
    "    print(\"\\nBased on your input, investment might not be successful. Consider adjusting parameters.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "16cb90b4-d9cc-4ec4-ae69-55c7efc63402",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "201ab912-f510-4fe3-aa6c-8be559363c11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model trained successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import pickle\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"bank_investment_dataset_updated.csv\")\n",
    "\n",
    "# Encode Company Name\n",
    "label_encoder = LabelEncoder()\n",
    "df[\"Company_Name_Encoded\"] = label_encoder.fit_transform(df[\"Company_Name\"])\n",
    "\n",
    "# Prepare features and target\n",
    "X = df.drop(columns=[\"Successful_Investment\", \"Failed_Investment\", \"Company_Name\", \"Company_Name_Encoded\"])\n",
    "y = df[\"Successful_Investment\"]\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Scale features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Train model\n",
    "rf_model = RandomForestClassifier(n_estimators=300, max_depth=15, min_samples_split=5, min_samples_leaf=2, bootstrap=True, random_state=42)\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "print(\"Model trained successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5bd93d8-5280-41f4-b231-1b8521025987",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model and Scaler saved successfully!\n"
     ]
    }
   ],
   "source": [
    "with open('investment_model.pkl', 'wb') as f:\n",
    "    pickle.dump(rf_model, f)\n",
    "\n",
    "with open('scaler.pkl', 'wb') as f:\n",
    "    pickle.dump(scaler, f)\n",
    "\n",
    "print(\"Model and Scaler saved successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f63df07-a9fb-4d94-83be-52bbfd3ae195",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded Model Successfully!\n"
     ]
    }
   ],
   "source": [
    "with open('investment_model.pkl', 'rb') as f:\n",
    "    loaded_model = pickle.load(f)\n",
    "with open('scaler.pkl', 'rb') as f:\n",
    "    loaded_scaler = pickle.load(f)\n",
    "print(\"Loaded Model Successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1c968d7-44f1-452c-bbc5-1163ef27dac3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
